//@version=5

strategy(title='T3MA Ribbon R4.2 by JustUncleL', shorttitle='T3RIBBON', overlay=true)

// Use Alternate Anchor TF for MAs 
anchor = input.int(0, minval=0, maxval=1440, title='Use Alternate Anchor TimeFrame (0=none, max=1440mins)')
LengthFast_ = input.int(8, minval=1, title='Fast T3MA length')
VolFactorFast = input.float(0.7, minval=0.0, maxval=1.0, title='Fast T3 Volume Factor')
LengthSlow__ = input.int(13, minval=2, title='Slow T3MA length')
VolFactorSlow = input.float(0.6, minval=0.0, maxval=1.0, title='Slow T3 Volume Factor')
ma_src = input(close, title='T3MA Source')
sBars = input(false, title='Show Coloured Trend Bars')
uGrabClr = input(false, title='Use Grab Bar 6-tone Colours, instead of Standard 3-tone')
ShowSwing = input(false, title='Show Swing Alerts')
dFilter = input(false, title='Filter Alerts to Ribbon Colour')
isHA = input(true, 'Use HA Candles for Calculations')
//
heikenashi_1 = ticker.heikinashi(syminfo.tickerid)
data = isHA ? heikenashi_1 : syminfo.tickerid
//
open_ = request.security(data, timeframe.period, open)
high_ = request.security(data, timeframe.period, high)
low_ = request.security(data, timeframe.period, low)
close_ = request.security(data, timeframe.period, close)
ma_src_ = request.security(data, timeframe.period, ma_src)

//col = close_ > open_ ? green : maroon
//plotbar(open_, high_, low_, close_, "Calc Bar", col)


// Constants colours that include fully non-transparent option.
green100 = #008000FF
lime100 = #00FF00FF
red100 = #FF0000FF
blue100 = #0000FFFF
aqua100 = #00FFFFFF
darkred100 = #8B0000FF
gray100 = #808080FF

// Make sure we have minimum channel spread.
LengthSlow_ = LengthSlow__ - LengthFast_ < 1 ? LengthFast_ + 1 : LengthSlow__

// If this is 5min or less Time Frame select EMAs
mult = timeframe.isintraday ? anchor == 0 or timeframe.multiplier <= 0 or timeframe.multiplier >= anchor or anchor > 1440 ? 1 : math.round(anchor / timeframe.multiplier) > 1 ? math.round(anchor / timeframe.multiplier) : 1 : 1
mult := not timeframe.isintraday ? anchor == 0 or timeframe.multiplier <= 0 or timeframe.multiplier >= anchor or anchor > 52 ? mult : math.round(anchor / timeframe.multiplier) > 1 ? math.round(anchor / timeframe.multiplier) : 1 : mult
//
LengthFast = mult == 1 ? LengthFast_ : LengthFast_ * mult - 1
LengthSlow = mult == 1 ? LengthSlow_ : LengthSlow_ * mult - 1


// T3 Moving Average Calculation Function.
T3MA(src, Length, VolFactor) =>
    xe1 = ta.ema(src, Length)
    xe2 = ta.ema(xe1, Length)
    xe3 = ta.ema(xe2, Length)
    xe4 = ta.ema(xe3, Length)
    xe5 = ta.ema(xe4, Length)
    xe6 = ta.ema(xe5, Length)
    b = VolFactor
    c1 = -b * b * b
    c2 = 3 * b * b + 3 * b * b * b
    c3 = -6 * b * b - 3 * b - 3 * b * b * b
    c4 = 1 + 3 * b + b * b * b + 3 * b * b
    c1 * xe6 + c2 * xe5 + c3 * xe4 + c4 * xe3


// Get the two T3MAs
t3maFast = T3MA(ma_src_, LengthFast, VolFactorFast)
t3maSlow = T3MA(ma_src_, LengthSlow, VolFactorSlow)

//Plot the Ribbon
fcolor = ta.rising(t3maFast, 2) ? color.green : color.red
ma1 = plot(t3maFast, color=ta.rising(t3maFast, 2) ? color.new(color.green, 20) : color.new(color.red, 20), linewidth=1, title='Fast t3ma')
ma2 = plot(t3maSlow, color=ta.rising(t3maSlow, 2) ? color.new(color.green, 20) : color.new(color.red, 20), linewidth=1, title='Slow t3ma')
fill(ma1, ma2, color=color.new(fcolor, 80), title='Ribbon Fill')

// Colour bars according to the close position relative to the MA selected
// Or Grab candle colour code bars according to the close position relative to the MA selected
grabcol = close_ >= open_ ? close_ > t3maFast and close_ > t3maSlow ? lime100 : close_ < t3maFast and close_ < t3maSlow ? red100 : aqua100 : close_ > t3maFast and close_ > t3maSlow ? green100 : close_ < t3maFast and close_ < t3maSlow ? darkred100 : blue100
stdcol = close_ > t3maFast and close_ > t3maSlow ? lime100 : close_ < t3maFast and close_ < t3maSlow ? red100 : gray100

barcolor(sBars ? uGrabClr ? grabcol : stdcol : na, title='Bar Colours')

// Generate Alert Arrows
//
buy = 0
sell = 0
buyT = 0
sellT = 0
// Generate signal by Grab Candle Colour
buy := grabcol == lime100 ? nz(buy[1]) + 1 : grabcol == green100 ? nz(buy[1]) > 0 ? nz(buy[1]) + 1 : 0 : 0
sell := grabcol == darkred100 ? nz(sell[1]) + 1 : grabcol == red100 ? nz(sell[1]) > 0 ? nz(sell[1]) + 1 : 0 : 0

// Trend Filter
buyT := buy == 0 ? 0 : dFilter and t3maFast < t3maSlow ? 0 : nz(buyT[1]) + 1
sellT := sell == 0 ? 0 : dFilter and t3maFast > t3maSlow ? 0 : nz(sellT[1]) + 1


// // Determine trend direction
// upTrend = t3maFast > t3maSlow and t3maFast > t3maFast[10]
// downTrend = t3maFast < t3maSlow and t3maFast < t3maFast[10]

// // Plot colored shapes based on trend direction
// plotshape(upTrend, style=shape.triangleup, location=location.belowbar, color=color.green, size=size.small)
// plotshape(downTrend, style=shape.triangledown, location=location.abovebar, color=color.red, size=size.small)


// Exit conditions
exitbuy = nz(buyT[1]) > 0 and buyT == 0
exitsell = nz(sellT[1]) > 0 and sellT == 0

//
plotarrow(ShowSwing and buyT == 1 ? 1 : na, title='BUY Swing Arrow', colorup=color.new(color.lime, 20), maxheight=60, minheight=50)
plotarrow(ShowSwing and sellT == 1 ? -1 : na, title='SELL Swing Arrow', colordown=color.new(color.red, 20), maxheight=60, minheight=50)
//
plotshape(ShowSwing and exitbuy, title='BUY Exit', style=shape.xcross, location=location.belowbar, color=color.new(color.gray, 0), text='Exit\nBuy', offset=0)
plotshape(ShowSwing and exitsell, title='Sell Exit', style=shape.xcross, location=location.abovebar, color=color.new(color.gray, 0), text='Exit\nSell', offset=0)

// Generate Alarms
alertcondition(buyT == 1, title='BUY Alert', message='BUY')
alertcondition(sellT == 1, title='SELL Alert', message='SELL')
alertcondition(exitbuy, title='BUY Exit Alert', message='ExitBuy')
alertcondition(exitsell, title='SELL Exit Alert', message='ExitSell')



ema9 = ta.ema(close, 9)
ema15 = ta.ema(close, 15)
rsi14 = ta.rsi(close, 14)

longCondition = ta.crossover(ema9, ema15) and rsi14 < 30
shortCondition = ta.crossunder(ema9, ema15) and rsi14 > 70

if (longCondition)
    strategy.entry("Buy", strategy.long)
if (shortCondition)
    strategy.entry("Sell", strategy.short)

// Close strategy positions
if (exitbuy)
    strategy.close("Buy")
if (exitsell)
    strategy.close("Sell")
//eof

